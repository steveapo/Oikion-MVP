// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
}

enum UserRole {
  ORG_OWNER
  ADMIN
  AGENT
  VIEWER
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  role          UserRole  @default(AGENT)

  // Organization relationship
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])

  accounts Account[]
  sessions Session[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")

  // CRM relationships
  createdProperties Property[] @relation("PropertyCreatedBy")
  createdClients    Client[]   @relation("ClientCreatedBy")
  createdTasks      Task[]     @relation("TaskCreatedBy")
  assignedTasks     Task[]     @relation("TaskAssignedTo")
  createdNotes      Note[]     @relation("NoteCreatedBy")
  createdInteractions Interaction[] @relation("InteractionCreatedBy")
  activities        Activity[] @relation("ActivityActor")

  @@index([organizationId])
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

// Organization model for multi-tenancy
model Organization {
  id          String   @id @default(cuid())
  name        String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @map(name: "updated_at")

  // Relationships
  users       User[]
  properties  Property[]
  clients     Client[]
  tasks       Task[]
  activities  Activity[]

  @@map(name: "organizations")
}

// Property Management (MLS)
enum PropertyType {
  APARTMENT
  HOUSE
  LAND
  COMMERCIAL
  OTHER
}

enum PropertyStatus {
  AVAILABLE
  UNDER_OFFER
  SOLD
  RENTED
}

enum TransactionType {
  SALE
  RENT
  LEASE
}

enum MarketingStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

model Property {
  id              String          @id @default(cuid())
  propertyType    PropertyType
  status          PropertyStatus
  transactionType TransactionType
  price           Decimal         @db.Decimal(12, 2)
  bedrooms        Int?
  bathrooms       Int?
  size            Decimal?        @db.Decimal(10, 2)
  yearBuilt       Int?
  features        Json?           // Array of feature strings
  description     String?         @db.Text
  createdAt       DateTime        @default(now()) @map(name: "created_at")
  updatedAt       DateTime        @default(now()) @map(name: "updated_at")

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  creator        User         @relation("PropertyCreatedBy", fields: [createdBy], references: [id])
  
  address        Address?
  listing        Listing?
  mediaAssets    MediaAsset[]
  interactions   Interaction[]
  notes          Note[]
  tasks          Task[]

  @@index([organizationId])
  @@index([createdBy])
  @@map(name: "properties")
}

model Address {
  id           String  @id @default(cuid())
  country      String  @default("Greece")
  region       String?
  city         String
  street       String?
  number       String?
  postalCode   String?
  locationText String?  @db.Text

  // Relationships
  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map(name: "addresses")
}

model Listing {
  id              String          @id @default(cuid())
  marketingStatus MarketingStatus @default(DRAFT)
  listPrice       Decimal         @db.Decimal(12, 2)
  publishedAt     DateTime?
  archivedAt      DateTime?
  notes           String?         @db.Text

  // Relationships
  propertyId String   @unique
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map(name: "listings")
}

enum AssetType {
  IMAGE
  VIDEO
}

model MediaAsset {
  id           String    @id @default(cuid())
  assetType    AssetType
  url          String
  isPrimary    Boolean   @default(false)
  displayOrder Int?
  uploadedAt   DateTime  @default(now()) @map(name: "uploaded_at")

  // Relationships
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId])
  @@map(name: "media_assets")
}

// CRM Models
enum ClientType {
  PERSON
  COMPANY
}

model Client {
  id             String     @id @default(cuid())
  clientType     ClientType
  name           String
  email          String?
  phone          String?
  secondaryEmail String?
  secondaryPhone String?
  tags           Json?      // Array of tag strings
  createdAt      DateTime   @default(now()) @map(name: "created_at")
  updatedAt      DateTime   @default(now()) @map(name: "updated_at")

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy      String
  creator        User         @relation("ClientCreatedBy", fields: [createdBy], references: [id])
  
  interactions Interaction[]
  notes        Note[]
  tasks        Task[]

  @@index([organizationId])
  @@index([createdBy])
  @@map(name: "clients")
}

enum InteractionType {
  CALL
  EMAIL
  MEETING
  VIEWING
}

model Interaction {
  id              String          @id @default(cuid())
  interactionType InteractionType
  summary         String          @db.Text
  timestamp       DateTime
  createdAt       DateTime        @default(now()) @map(name: "created_at")

  // Relationships
  clientId   String?
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdBy  String
  creator    User      @relation("InteractionCreatedBy", fields: [createdBy], references: [id])

  @@index([clientId])
  @@index([propertyId])
  @@index([createdBy])
  @@map(name: "interactions")
}

enum TaskStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?    @db.Text
  dueDate     DateTime?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now()) @map(name: "created_at")

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedTo     String?
  assignee       User?        @relation("TaskAssignedTo", fields: [assignedTo], references: [id])
  createdBy      String
  creator        User         @relation("TaskCreatedBy", fields: [createdBy], references: [id])
  clientId       String?
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  propertyId     String?
  property       Property?    @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([assignedTo])
  @@index([createdBy])
  @@index([clientId])
  @@index([propertyId])
  @@map(name: "tasks")
}

model Note {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now()) @map(name: "created_at")

  // Relationships
  clientId   String?
  client     Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  propertyId String?
  property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdBy  String
  creator    User      @relation("NoteCreatedBy", fields: [createdBy], references: [id])

  @@index([clientId])
  @@index([propertyId])
  @@index([createdBy])
  @@map(name: "notes")
}

// Activity Feed (Oikosync)
enum ActionType {
  PROPERTY_CREATED
  PROPERTY_UPDATED
  PROPERTY_ARCHIVED
  MEDIA_ADDED
  CLIENT_CREATED
  CLIENT_UPDATED
  NOTE_ADDED
  INTERACTION_LOGGED
  TASK_CREATED
  TASK_COMPLETED
  MEMBER_INVITED
  MEMBER_ROLE_CHANGED
  SUBSCRIPTION_STARTED
  SUBSCRIPTION_UPDATED
  SUBSCRIPTION_CANCELLED
}

enum EntityType {
  PROPERTY
  CLIENT
  TASK
  USER
  SUBSCRIPTION
}

model Activity {
  id         String     @id @default(cuid())
  actionType ActionType
  entityType EntityType
  entityId   String
  payload    Json?      // Additional context data
  createdAt  DateTime   @default(now()) @map(name: "created_at")

  // Relationships
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  actorId        String
  actor          User         @relation("ActivityActor", fields: [actorId], references: [id])

  @@index([organizationId])
  @@index([actorId])
  @@index([createdAt])
  @@map(name: "activities")
}
